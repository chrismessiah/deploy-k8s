- hosts: master
  become: yes
  gather_facts: false
  tasks:
    - name: initialize the cluster (Docker) with CIDR
      when: container_runtime == "DOCKER" and cidr is defined
      shell: |
        kubeadm init --apiserver-advertise-address {{ master_public_ip }} \
                     --pod-network-cidr={{ cidr }} \
                     --kubernetes-version={{ k8_version_long }} >> kubeadm-init.log
      register: kubeadm_init
      args:
        chdir: $HOME
        creates: kubeadm-init.log

    - name: initialize the cluster (Docker) without CIDR
      when: container_runtime == "DOCKER" and cidr is not defined
      shell: |
        kubeadm init --apiserver-advertise-address {{ master_public_ip }} \
                     --kubernetes-version={{ k8_version_long }} >> kubeadm-init.log
      register: kubeadm_init
      args:
        chdir: $HOME
        creates: kubeadm-init.log

    - name: initialize the cluster (CRI-O)
      when: container_runtime == "CRI-O" and cidr is defined
      shell: |
        kubeadm init --apiserver-advertise-address {{ master_public_ip }} \
                     --pod-network-cidr={{ cidr }} \
                     --cri-socket=/var/run/crio/crio.sock \
                     --kubernetes-version={{ k8_version_long }} >> kubeadm-init.log
      register: kubeadm_init
      args:
        chdir: $HOME
        creates: kubeadm-init.log

    - name: initialize the cluster (CRI-O)
      when: container_runtime == "CRI-O" and cidr is not defined
      shell: |
        kubeadm init --apiserver-advertise-address {{ master_public_ip }} \
                     --cri-socket=/var/run/crio/crio.sock \
                     --kubernetes-version={{ k8_version_long }} >> kubeadm-init.log
      register: kubeadm_init
      args:
        chdir: $HOME
        creates: kubeadm-init.log

    - name: create .kube directory
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: copy admin.conf to master's kube config
      when: kubeadm_init is succeeded
      copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
        remote_src: yes

    - name: copy admin.conf to ansible client host's kube config
      when: kubeadm_init is succeeded
      fetch:
        src: /etc/kubernetes/admin.conf
        dest: ~/.kube/config
        flat: yes

    - name: get join command
      when: kubeadm_init is succeeded
      shell: "kubeadm token create --print-join-command"
      register: join_command_raw

    - name: set join command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- hosts: workers
  become: yes
  tasks:
  - name: join cluster
    shell: "{{ hostvars['master'].join_command }} >> kubeadm-join.log"
    args:
      chdir: $HOME
      creates: kubeadm-join.log
